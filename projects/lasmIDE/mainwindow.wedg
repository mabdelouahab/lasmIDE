include MainWindow.inc

.data
;------------------------
DialogFont gpointer 0
DialogColor gpointer 0
DialogApp gpointer 0
menu_Settings_WordWrap gpointer 0
menu_settings_highlight gpointer 0

;------------------------

	WMnEmptyProject     			gpointer    0

	WTerminal           				gpointer    0   
	WTerminal_child_pid		gpointer    0 
	WMnTBStopRun				gpointer    0
	WMnTBRun					gpointer    0 

	W_ICON_Assemble			gpointer    0 

	WTerminal_exit_status		gint	    0 
	vte_background				GdkRGBA 	<>
	vte_color_cursor 				GdkRGBA		<>

	vte_terminal_set_color_background 	proto :vararg
	vte_terminal_set_color_cursor 		proto :vararg
	vte_terminal_set_cursor_blink_mode	proto :vararg
	vte_terminal_set_cursor_shape		proto :vararg



.code

	InitMainWindow PROC
		local WMnQuit:gpointer ; 
		local WMnNewFile:gpointer 
		local position:gpointer
		local _err:gpointer

	    	mov _err,0

		mov GGtkBuilder,rv(gtk_builder_new)
		mov _err,0
		invoke gtk_builder_add_from_string, GGtkBuilder,addr MainWindowInterface ,MainWindowInterface_sz,addr _err
    		invoke gtk_builder_connect_signals,GGtkBuilder,0       ;this will connect all signals to respective functions in glade xml file
      		 ;invoke gtk_builder_add_from_file  , GGtkBuilder,str$("UASMIde1.glade"),addr _err 
;		.if rax==0
;		    lea r12,_err
;		    mov r12,[r12]
;		    mov r12,QWORD PTR [r12+8]
;		    invoke printf,str$(<13,10,"Error loading interface {%s}">),r12
;		    ret
;		.endif
        
		mov WMainwindow         		,rv(gtk_builder_get_object					,GGtkBuilder,str$("WMainwindow"))
		mov WProjectTreeView  		,rv(gtk_builder_get_object					,GGtkBuilder,str$("WProjectTreeView"))
		mov NoteBookContainer   	,rv(gtk_builder_get_object					,GGtkBuilder,str$("NoteBookContainer"))
		mov WPaned1             			,rv(gtk_builder_get_object					,GGtkBuilder,str$("WPaned1"))
		mov WPaned2             			,rv(gtk_builder_get_object					,GGtkBuilder,str$("WPaned2"))
;-------------------------------------------------------------
		mov DialogFont,rv(gtk_builder_get_object					,GGtkBuilder,str$("DialogFont"))
		mov DialogColor,rv(gtk_builder_get_object					,GGtkBuilder,str$("DialogColor"))
		mov DialogApp,rv(gtk_builder_get_object					,GGtkBuilder,str$("DialogApp"))
;-------------------------------------------------------------
		mov menu_Settings_WordWrap	,rv(gtk_builder_get_object					,GGtkBuilder,str$("menu_Settings_WordWrap"))
		mov menu_settings_highlight	,rv(gtk_builder_get_object					,GGtkBuilder,str$("menu_settings_highlight"))

		Helpers_signal_connect_data	"WMn_NewFile"	,"activate",On_WMn_NewFile_Clicked
 
		Helpers_signal_connect_data	"WMnBrowse"	,"activate",On_WMnBrowse_Clicked
		Helpers_signal_connect_data	"WMn_AddFile_asm"	,"activate",On_WMn_AddFile_asm_Clicked
		Helpers_signal_connect_data	"WMn_AddFile_inc"	,"activate",On_WMn_AddFile_inc_Clicked
		Helpers_signal_connect_data	"WMn_AddFile_wedg"	,"activate",On_WMn_AddFile_wedg_Clicked
		Helpers_signal_connect_data	"WMn_AddFile_rc"	,"activate",On_WMn_AddFile_rc_Clicked
		Helpers_signal_connect_data	"WMn_AddFile_c"	,"activate",On_WMn_AddFile_c_Clicked
		Helpers_signal_connect_data	"WMn_AddFile_h"	,"activate",On_WMn_AddFile_h_Clicked
		Helpers_signal_connect_data	"WMn_AddFile_txt"	,"activate",On_WMn_AddFile_txt_Clicked
		Helpers_signal_connect_data	"WMn_AddFile_xml"	,"activate",On_WMn_AddFile_xml_Clicked
		Helpers_signal_connect_data	"WMn_AddFile"	,"activate",On_WMn_AddFile_Clicked

		invoke Helpers_GtkImage_From_File,GGtkBuilder	,"W_ICON_Assemble"		,"Assemble.png"
		invoke Helpers_GtkImage_From_File,GGtkBuilder	,"W_ICON_Build"			,"Build2.png"
		invoke Helpers_GtkImage_From_File,GGtkBuilder	,"W_ICON_Pre_Assemble"	,"PreAssemble.png"
		invoke Helpers_GtkImage_From_File,GGtkBuilder	,"W_ICON_Save"			,"save.png"
		invoke Helpers_GtkImage_From_File,GGtkBuilder	,"W_ICON_Save_All"		,"saveall.png"
;----------------------------------------------------------------------
;	read list of lasts project, then:
;                        submenu = g_menu_new ();
;                        g_menu_insert_submenu (G_MENU (app_menu), 0, _("Profiles"), G_MENU_MODEL (submenu));
 ;		invoke g_signal_connect_data,   submenu,"activate",addr CallB__,0,0,0         
 ;+++++++

  		 gtk_menu_item_new_with_label proto :vararg

		 .data
		 	Menu_Last_Project	dq	0
		 .code
 
 		 	.if Settings_Last_Project
			       mov  Menu_Last_Project ,rv( gtk_menu_item_new_with_label ,Settings_Last_Project );
				invoke gtk_container_add,rv(gtk_builder_get_object,GGtkBuilder,"WMnOpenProjectsubmenu"), Menu_Last_Project	 
		 		invoke g_signal_connect_data,  Menu_Last_Project,"activate",addr MainWindow_callback_Open_Project_From_List,Settings_Last_Project,0,0         
		 	.endif		 

 
 		LastProjectMenuList

		mov WTerminal    			,rv( vte_terminal_new);
		m2m	vte_background.red		,Settings_VTE_BG_red
		m2m	vte_background.green	,Settings_VTE_BG_green
		m2m	vte_background.blue		,Settings_VTE_BG_blue
		m2m	vte_background.alpha	,Settings_VTE_BG_alpha
		
		m2m	vte_color_cursor.red	,Settings_VTE_cursor_red
		m2m	vte_color_cursor.green	,Settings_VTE_cursor_green
		m2m	vte_color_cursor.blue	,Settings_VTE_cursor_blue
		m2m	vte_color_cursor.alpha	,Settings_VTE_cursor_alpha
        
		invoke vte_terminal_set_color_background,WTerminal,addr vte_background
		invoke vte_terminal_set_color_cursor,WTerminal,addr vte_color_cursor
		invoke vte_terminal_set_cursor_blink_mode,WTerminal,Settings_VTE_cursor_blnkMode	;enum VteTerminalCursorBlinkMode
		invoke vte_terminal_set_cursor_shape,WTerminal,Settings_VTE_cursor_shape			;VteTerminalCursorShape

		invoke vte_terminal_set_mouse_autohide,WTerminal,1
		invoke gtk_container_add,rv(gtk_builder_get_object, GGtkBuilder,str$("WWatchScrolledWindow")),WTerminal         
 		    
		invoke gtk_window_maximize,WMainwindow
		invoke gtk_container_add,NoteBookContainer,WNotebook


		invoke g_signal_connect_data,WMainwindow    ,str$("show")    ,addr On_Show    ,0,0,0     
		invoke g_signal_connect_data,WMainwindow    ,str$("destroy")    ,addr MainWindow_callback_wQuit    ,0,0,0     


		.if rv(STNG_Get,stng_paned1_Position,addr position)
			invoke gtk_paned_set_position,WPaned1,eax
		.endif
		.if rv(STNG_Get,stng_paned2_Position,addr position)
			invoke gtk_paned_set_position,WPaned2,eax
		.endif

		invoke gtk_widget_queue_draw,WMainwindow
		invoke gtk_widget_show_all ,WMainwindow
			
		
  		ret
	InitMainWindow ENDP    
	On_Show PROC
		.if Arg_Project
			invoke Projects_Load_Project,Arg_Project
		.else
			.if Settings_Load_Last_Project
	    			call Projects_Load_Last_Project
			.endif
		.endif
		.if Current_Prj_FileName
			call TreeView_Show_Current_Project			
		.endif
		ret
	On_Show ENDP	

	.data	
		paned_1_pos dword 0
		paned_2_pos dword 0
	.code
	OnPaned1sizeallocate   PROC widget:gpointer, user_data:gpointer
		invoke gtk_paned_get_position,widget
		mov paned_1_pos,eax
;		invoke STNG_Set,stng_paned1_Position,eax			;moved to signal when widget is destroyed callback
		ret
	OnPaned1sizeallocate   ENDP

	OnPaned2sizeallocate   PROC widget:gpointer, user_data:gpointer
		invoke gtk_paned_get_position,widget
		mov paned_2_pos,eax
;		invoke STNG_Set,stng_paned2_Position,eax			;moved to signal when widget is destroyed callback
		ret
	OnPaned2sizeallocate   ENDP    
	

	;------------------------------------------------
	align 16
	menu_Tools_Font PROC
	local font_dialog:gpointer
	local font_name:gpointer
	local font_desc:qword
	local viewer:qword

	    invoke gtk_dialog_run,DialogFont
		.if eax == GTK_RESPONSE_OK
		call Notebook_Get_Current_Viewer
		mov viewer,rax

			invoke gtk_font_chooser_get_font,DialogFont
			mov font_name,rax
			invoke pango_font_description_from_string,font_name
			mov font_desc,rax

			invoke gtk_widget_modify_font,viewer,font_desc
			invoke g_free,font_name
		.endif
	    invoke gtk_widget_hide,DialogFont

	ret
	menu_Tools_Font ENDP


	align 16
	menu_Tools_Color PROC uses r12
	local viewer:gpointer
	local color:GdkRGBA
	local color_string:gpointer
	local color_tokens:gpointer
	local red:gpointer
	local green:gpointer
	local blue:gpointer
	local rgbcss:gpointer
	local buffer:gpointer

	    invoke gtk_dialog_run,DialogColor
	    .if eax == GTK_RESPONSE_OK

		invoke gtk_color_chooser_get_rgba,DialogColor,addr color
		invoke gdk_rgba_to_string,addr color

		mov color_string,rax

	;01234 01 01  0
	;rgb(18,41,221)

		invoke g_strsplit_set,color_string,CStr("rgb(,)"),-1
		mov color_tokens,rax
		mov r12,rax
		add r12,4*8
		invoke g_ascii_strtoull,qword ptr [r12],NULL,10
		mov red,rax
		add r12,1*8
		invoke g_ascii_strtoull,qword ptr [r12],NULL,10
		mov green,rax
		add r12,1*8
		invoke g_ascii_strtoull,qword ptr [r12],NULL,10
		mov blue,rax
		invoke g_strfreev,color_tokens
		invoke g_strdup_printf,CStr("#%02x%02x%02x"),red,green,blue
		mov rgbcss,rax

			call Notebook_Get_Current_Buffer
			mov buffer,rax
		.if buffer
		    invoke gtk_text_buffer_insert_at_cursor,buffer,rgbcss,7
		.endif
		invoke g_free,rgbcss

	    .endif
	    invoke gtk_widget_hide,DialogColor
	ret
	menu_Tools_Color ENDP

	align 16
	menu_Tools_App PROC

	    invoke gtk_dialog_run,DialogApp
	    .if eax == GTK_RESPONSE_OK

	    .endif
	    invoke gtk_widget_hide,DialogApp

	ret
	menu_Tools_App ENDP


	align 16
	menu_Help_Function PROC
	local buffer:gpointer
	local mstart:_GtkTextIter
	local mend:_GtkTextIter
	local text:gpointer
	local standard_out:ptr
	local standard_err:ptr
	local exit_state:gint
	local error:GError
	local exec_command_line:gpointer

		
	call Notebook_Get_Current_Buffer
	mov buffer,rax
	.if buffer	
		invoke gtk_text_buffer_get_selection_bounds,buffer,addr mstart,addr mend
		.if rax == TRUE					;some text was selected, so, get it
			invoke gtk_text_buffer_get_text,buffer,addr mstart,addr mend,FALSE
			mov text,rax
			invoke g_strconcat,CStr("devhelp -a "), text,0
			mov exec_command_line,rax
			
			mov standard_out,0
			mov exit_state,0
			mov error,0
			invoke g_spawn_command_line_sync,exec_command_line,addr standard_out, addr standard_err,addr exit_state,addr error
	;		.if rax == FALSE
	;			mov rax,error
	;			assume rax:GError
	;			mov rsi,[rax].message
	;			assume rax:nothing
	;			msgbox "Incomplete Code"
	;		.endif
			invoke g_free,exec_command_line
		.endif
	.endif
	ret
	menu_Help_Function ENDP


	align 16
	menu_Settings_WordWrap_toggled_cb PROC
	local ON_OFF:gpointer
	local view:gpointer

	invoke gtk_check_menu_item_get_active,menu_Settings_WordWrap
	;invoke gtk_check_menu_item_toggled,menu_Settings_WordWrap
	mov ON_OFF,rax
	invoke Notebook_Get_Current_Viewer
	mov view,rax
	.if view
	    .if ON_OFF
		invoke gtk_text_view_set_wrap_mode,view,GTK_WRAP_WORD_CHAR		    ;WRAP ON
	    .else
		invoke gtk_text_view_set_wrap_mode,view,GTK_WRAP_NONE   		    ;WRAP OFF
	    .endif
	.endif
	ret
	menu_Settings_WordWrap_toggled_cb ENDP


	align 16
	menu_settings_highlight_cb PROC
	local ON_OFF:gpointer
	local view:gpointer

	invoke gtk_check_menu_item_get_active,menu_settings_highlight
	mov ON_OFF,rax
	invoke Notebook_Get_Current_Viewer
	mov view,rax
	.if view
	    .if ON_OFF
		invoke gtk_source_view_set_highlight_current_line,view,TRUE
	    .else
		invoke gtk_source_view_set_highlight_current_line,view,FALSE
	    .endif
	.endif
	ret
	menu_settings_highlight_cb ENDP



	.DATA
	MainWindowInterface label qword
	incbin <mainwindow.glade>
	MainWindowInterface_sz equ $-MainWindowInterface

